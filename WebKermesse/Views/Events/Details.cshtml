 @model WebKermesse.Models.EventViewModel


<div class="row center">
    <div class="card mb-3 cardShadow margin" style="width: auto; height:auto; border:2px #772953 solid">
        <h3 class="card-title" style="margin-left:20px">@ViewBag.Libelle</h3>
        <img class="card-img-top" src="@ViewBag.Image" alt="Card image cap" style="max-width:650px;height:auto;  display:block; margin-left:auto; margin-right:auto;">
        <div class="card-body">
            <hr />
            <dl class="dl-horizontal">

                <dt>
                    Description
                </dt>

                <dd>
                    @ViewBag.Description
                </dd>

                <dt>
                    Date de début
                </dt>

                <dd>
                    @ViewBag.StartDate
                </dd>

                <dt>
                    Date de fin
                </dt>

                <dd>
                    @ViewBag.EndDate
                </dd>

                <dt>
                    Thème
                </dt>

                <dd>
                    @ViewBag.Theme
                </dd>

                <dt>
                    Rue
                </dt>

                <dd>
                    @ViewBag.StreetAddress
                </dd>

                <dt>
                    Code Postal
                </dt>

                <dd>
                    @ViewBag.PostalCode
                </dd>

                <dt>
                    Ville
                </dt>

                <dd>
                    @ViewBag.City
                </dd>
            </dl>
            <hr />
        </div>
        <div class="card-body">

            <style>
                /* Always set the map height explicitly to define the size of the div
                * element that contains the map. */
                #map {
                    height: 600px;
                    width: 100%;
                }
                /* Optional: Makes the sample page fill the window. */
                html, body {
                    height: 100%;
                    margin-top: 30px;
                    padding: 0;
                }

                .controls {
                    margin-top: 10px;
                    border: 1px solid transparent;
                    border-radius: 2px 0 0 2px;
                    box-sizing: border-box;
                    -moz-box-sizing: border-box;
                    height: 32px;
                    outline: none;
                    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
                }

                #origin-input,
                #destination-input {
                    background-color: #fff;
                    font-family: Roboto;
                    font-size: 15px;
                    font-weight: 300;
                    margin-left: 12px;
                    padding: 0 11px 0 13px;
                    text-overflow: ellipsis;
                    width: 200px;
                }

                    #origin-input:focus,
                    #destination-input:focus {
                        border-color: #4d90fe;
                    }

                #mode-selector {
                    color: #fff;
                    background-color: #4d90fe;
                    margin-left: 12px;
                    padding: 5px 11px 0px 11px;
                }

                    #mode-selector label {
                        font-family: Roboto;
                        font-size: 13px;
                        font-weight: 300;
                    }
            </style>


            <input id="origin-input" type="text" class="controls"
                   placeholder="Adresse de départ" size="80" style="border:2px #772953 solid; width:600px;">
            <button onclick="calcRoute()">Afficher trajet</button>

            <div id="map"></div>


            <script>
                window.markers = [];
                var geocoder;
                var directionDisplay;
                
                function initMap() {
                    directionsDisplay = new google.maps.DirectionsRenderer();
                    geocoder = new google.maps.Geocoder();
                    var map = new google.maps.Map(document.getElementById('map'), {
                        mapTypeControl: false,
                        mapTypeId: 'roadmap',
                        center: { lat: 48.109771, lng: -1.679117 },
                        zoom: 13
                    });
                    directionsDisplay.setMap(map);
                    new AutocompleteDirectionsHandler(map);
                }

                //insertion d'un emplacement
                function geocodeAddress(location) {
                    //recherche d'un emplacement par les infos d'adresse
                    geocoder.geocode({ 'address': location[1] }, function (results, status) {
                        //alert(status);
                        // si emplacement trouvé sur GMap
                        if (status == google.maps.GeocoderStatus.OK) {
                            window.markers.push([location[0], results[0].geometry.location.lat(), results[0].geometry.location.lng()]);
                        }
                        else {
                            alert("some problem in geocode" + status);
                        }
                    });
                }

                function AutocompleteDirectionsHandler(map) {
                    this.map = map;
                    this.originPlaceId = null;
                    var originInput = document.getElementById('origin-input');
                    this.directionsDisplay = new google.maps.DirectionsRenderer();
                    this.directionsDisplay.setMap(map);

                    var originAutocomplete = new google.maps.places.Autocomplete(
                        originInput, { placeIdOnly: true });

                    this.setupPlaceChangedListener(originAutocomplete, 'ORIG');
                }

                AutocompleteDirectionsHandler.prototype.setupPlaceChangedListener = function (autocomplete, mode) {
                    var me = this;
                    autocomplete.bindTo('bounds', this.map);
                    autocomplete.addListener('place_changed', function () {
                        var place = autocomplete.getPlace();
                        if (!place.place_id) {
                            window.alert("Please select an option from the dropdown list.");
                            return;
                        }
                        if (mode === 'ORIG') {
                            me.originPlaceId = place.place_id;
                        }
                    });

                };

                // Calculate our route between the markers & set/change the mode of travel
                function calcRoute() {
                    // Multiple Markers (Start & end destination)
                    var directionsService = new google.maps.DirectionsService();
                    var ListNameEvent = @Html.Raw(Json.Encode(ViewBag.Libelle));
                    var ListAddressEvent = @Html.Raw(Json.Encode(ViewBag.StreetAddress)) +" " + @Html.Raw(Json.Encode(ViewBag.PostalCode)) +" " + @Html.Raw(Json.Encode(ViewBag.City));
                    var originInput = document.getElementById('origin-input').value;
                    console.log(originInput);
                    var origin = ['Origin', originInput];
                    geocodeAddress(origin);
                    var destination = ['Destination', ListAddressEvent];
                    geocodeAddress(destination);
                    var request = {
                        origin: new google.maps.LatLng(markers[0][1], markers[0][2]),
                        destination: new google.maps.LatLng(markers[1][1], markers[1][2]),
                        travelMode: google.maps.TravelMode.DRIVING
                    };
                    directionsService.route(request, function (response, status) {
                        if (status == google.maps.DirectionsStatus.OK) {
                            directionsDisplay.setDirections(response);
                        } else {
                            console.log(status);
                        }
                    });

                    // Render our directions on the map
                   directionsDisplay.setMap(map);
                }

            </script>
            <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB67MlViEjryRDO6eCtCF3mQzV2vyExT_Y&libraries=places&callback=initMap"
                    async defer></script>




        </div>
    </div>  
</div>
<hr />
<p>
    
    @Html.ActionLink("Retour à la liste d'évents", "Index")
</p>
